// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BigRepair.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231001080719_InitialBase")]
    partial class InitialBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RepairObjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RepairObjectId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BigRepairData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<double>("Count")
                        .HasColumnType("REAL");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MasterId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RepairObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("RepairObjectId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("BigRepairData");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("RepairObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RepairObjects");
                });

            modelBuilder.Entity("WorkKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkKinds");
                });

            modelBuilder.Entity("WorkList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Amount")
                        .HasColumnType("REAL");

                    b.Property<double>("Count")
                        .HasColumnType("REAL");

                    b.Property<int?>("RepairObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RepairObjectId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("WorkLists");
                });

            modelBuilder.Entity("WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkKindID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkKindID");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("RepairObject", "RepairObject")
                        .WithMany()
                        .HasForeignKey("RepairObjectId");

                    b.Navigation("Client");

                    b.Navigation("RepairObject");
                });

            modelBuilder.Entity("BigRepairData", b =>
                {
                    b.HasOne("Master", "Master")
                        .WithMany("BigRepairData")
                        .HasForeignKey("MasterId");

                    b.HasOne("RepairObject", "RepairObject")
                        .WithMany("BigRepairData")
                        .HasForeignKey("RepairObjectId");

                    b.HasOne("WorkType", "WorkType")
                        .WithMany("BigRepairData")
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("Master");

                    b.Navigation("RepairObject");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("RepairObject", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany("RepairObjects")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("WorkList", b =>
                {
                    b.HasOne("RepairObject", "RepairObject")
                        .WithMany()
                        .HasForeignKey("RepairObjectId");

                    b.HasOne("WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId");

                    b.Navigation("RepairObject");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("WorkType", b =>
                {
                    b.HasOne("WorkKind", "WorkKind")
                        .WithMany("WorkTypes")
                        .HasForeignKey("WorkKindID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkKind");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Navigation("RepairObjects");
                });

            modelBuilder.Entity("Master", b =>
                {
                    b.Navigation("BigRepairData");
                });

            modelBuilder.Entity("RepairObject", b =>
                {
                    b.Navigation("BigRepairData");
                });

            modelBuilder.Entity("WorkKind", b =>
                {
                    b.Navigation("WorkTypes");
                });

            modelBuilder.Entity("WorkType", b =>
                {
                    b.Navigation("BigRepairData");
                });
#pragma warning restore 612, 618
        }
    }
}
